<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Atusy&#39;s blog</title>
    <link>https://atusy.github.io/en/post/</link>
    <description>Recent content in Posts on Atusy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 02 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://atusy.github.io/en/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Marginal distributions with ggplot2 and patchwork</title>
      <link>https://atusy.github.io/en/2018/11/02/marginal-patchwork/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://atusy.github.io/en/2018/11/02/marginal-patchwork/</guid>
      <description>patchwork packages is a great tool to assemble ggplot2 object.
I made a Japanese slide to introduce patchwork package in Tokyo R meeting.
Here, I tried to produce marginal plots, but failed because I was using plot arithmetics (| and /).
library(ggplot2) library(patchwork) xy &amp;lt;- ggplot(mtcars, aes(wt, mpg)) + geom_point() x &amp;lt;- ggplot(mtcars, aes(wt)) + geom_histogram(bins = 30) y &amp;lt;- ggplot(mtcars, aes(mpg)) + geom_histogram(bins = 30) + coord_flip() (x | plot_spacer()) / (xy | y) I just found that wrap_plots() helps.</description>
    </item>
    
    <item>
      <title>Benchmark chunks in Rmd</title>
      <link>https://atusy.github.io/en/2018/08/18/time-each-chunk/</link>
      <pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://atusy.github.io/en/2018/08/18/time-each-chunk/</guid>
      <description>Implementation Test Question Tip   In order to benchmark chunks, I implemented a hook for Rmd’s chunk which works as if Jupyter Notebook’s %%timeit command.
Implementation A simple benchmark is done by saving proc.time() before running code and subtract the value from new proc.time() after code runs.
t &amp;lt;- proc.time()[&amp;#39;elapsed&amp;#39;] invisible(runif(100)) proc.time()[&amp;#39;elapsed&amp;#39;] - t ## elapsed ## 0.006 However, hooks are functions, and bodies of functions are evaluated in different environments every time.</description>
    </item>
    
  </channel>
</rss>